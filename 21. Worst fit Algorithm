#include <stdio.h>
void worstFit(int blocks[], int numBlocks, int processes[], int numProcesses) 
{
    int allocation[numProcesses];
    for (int i = 0; i < numProcesses; i++) 
	{
        allocation[i] = -1;
    }
    for (int i = 0; i < numProcesses; i++) 
	{
        int worstIdx = -1;
        for (int j = 0; j < numBlocks; j++) 
		{
            if (blocks[j] >= processes[i]) 
			{
                if (worstIdx == -1 || blocks[j] > blocks[worstIdx]) 
				{
                    worstIdx = j;
                }
            }
        }
        if (worstIdx != -1) 
		{
            allocation[i] = worstIdx;
            blocks[worstIdx] -= processes[i];
        }
    }
    printf("Process No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < numProcesses; i++) 
	{
        printf("%d\t\t%d\t\t", i + 1, processes[i]);
        if (allocation[i] != -1) 
		{
            printf("%d\n", allocation[i] + 1);
        } else {
            printf("Not Allocated\n");
        }
    }
}
int main() 
{
    int blocks[] = {100, 500, 200, 300, 600};
    int processes[] = {212, 417, 112, 426};
    int numBlocks = sizeof(blocks) / sizeof(blocks[0]);
    int numProcesses = sizeof(processes) / sizeof(processes[0]);
    worstFit(blocks, numBlocks, processes, numProcesses);
    return 0;
}
