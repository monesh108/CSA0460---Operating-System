#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
int data = 0, reader_count = 0;  
sem_t mutex, write_lock;      
void* reader(void* id) 
{
    sem_wait(&mutex);
    reader_count++;
    if (reader_count == 1) sem_wait(&write_lock); 
    sem_post(&mutex);
    printf("Reader %d reads: %d\n", *(int*)id, data);
    sem_wait(&mutex);
    reader_count--;
    if (reader_count == 0) sem_post(&write_lock);  
    sem_post(&mutex);
    return NULL;
}
void* writer(void* id) 
{
    sem_wait(&write_lock);
    data++;
    printf("Writer %d writes: %d\n", *(int*)id, data);
    sem_post(&write_lock);
    return NULL;
}
int main() 
{
    pthread_t r[3], w[2];
    int ids[] = {1, 2, 3, 4, 5};
    sem_init(&mutex, 0, 1);
    sem_init(&write_lock, 0, 1);
    for (int i = 0; i < 3; i++) pthread_create(&r[i], NULL, reader, &ids[i]);
    for (int i = 0; i < 2; i++) pthread_create(&w[i], NULL, writer, &ids[i + 3]);
    for (int i = 0; i < 3; i++) pthread_join(r[i], NULL);
    for (int i = 0; i < 2; i++) pthread_join(w[i], NULL);
    sem_destroy(&mutex);
    sem_destroy(&write_lock);
    return 0;
}
