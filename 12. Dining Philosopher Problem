#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#define NUM_PHILOSOPHERS 5
sem_t forks[NUM_PHILOSOPHERS]; 
void* philosopher(void* num) {
    int id = *((int*)num);  
    while(1) {
        printf("Philosopher %d is thinking.\n", id);
        sleep(1);
        sem_wait(&forks[id]);
        sem_wait(&forks[(id + 1) % NUM_PHILOSOPHERS]);
        printf("Philosopher %d is eating.\n", id);
        sleep(2);
        sem_post(&forks[(id + 1) % NUM_PHILOSOPHERS]);
        sem_post(&forks[id]);
        printf("Philosopher %d is done eating.\n", id);
    }
    return NULL;
}
int main() {
    pthread_t threads[NUM_PHILOSOPHERS];
    int philosopher_ids[NUM_PHILOSOPHERS];
    for(int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_init(&forks[i], 0, 1);
    }
    for(int i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopher_ids[i] = i;  
        pthread_create(&threads[i], NULL, philosopher, &philosopher_ids[i]);
    }
    for(int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(threads[i], NULL);
    }
    for(int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_destroy(&forks[i]);
    }
    return 0;
}
