#include <stdio.h>
typedef struct {
    int processID;
    int burstTime;
    int remainingBurstTime;
    int waitingTime;
    int turnaroundTime;
} Process;
void calculateWaitingTime(Process processes[], int n, int quantum) {
    int completed = 0, currentTime = 0;
    int isCompleted[n];
    for (int i = 0; i < n; i++) {
        isCompleted[i] = 0;
        processes[i].remainingBurstTime = processes[i].burstTime;
    }
    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remainingBurstTime > 0) {
                if (processes[i].remainingBurstTime > quantum) {
                    processes[i].remainingBurstTime -= quantum;
                    currentTime += quantum;
                } else {
                    currentTime += processes[i].remainingBurstTime;
                    processes[i].waitingTime = currentTime - processes[i].burstTime;
                    processes[i].turnaroundTime = currentTime;
                    processes[i].remainingBurstTime = 0;
                    isCompleted[i] = 1;
                    completed++;
                }
            }
        }
    }
}
void displayResults(Process processes[], int n) {
    int totalWaitingTime = 0, totalTurnaroundTime = 0;
    printf("\nProcessID\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\n", processes[i].processID,
               processes[i].burstTime, processes[i].waitingTime,
               processes[i].turnaroundTime);
        totalWaitingTime += processes[i].waitingTime;
        totalTurnaroundTime += processes[i].turnaroundTime;
    }
    printf("\nAverage Waiting Time: %.2f\n", (float)totalWaitingTime / n);
    printf("Average Turnaround Time: %.2f\n", (float)totalTurnaroundTime / n);
}
int main() {
    int n, quantum;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the time quantum: ");
    scanf("%d", &quantum);
    Process processes[n];
    for (int i = 0; i < n; i++) {
        printf("\nEnter details for Process %d\n", i + 1);
        processes[i].processID = i + 1;
        printf("Burst Time: ");
        scanf("%d", &processes[i].burstTime);
    }
    calculateWaitingTime(processes, n, quantum);
    displayResults(processes, n);
    return 0;
}
