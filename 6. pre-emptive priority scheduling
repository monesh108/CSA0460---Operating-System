#include <stdio.h>
typedef struct {
    int processID;
    int burstTime;
    int waitingTime;
    int turnaroundTime;
    int priority;
    int remainingBurstTime;
} Process;
void calculateWaitingTime(Process processes[], int n) {
    int completed = 0, currentTime = 0, minPriority;
    int isCompleted[n];
    for (int i = 0; i < n; i++) {
        isCompleted[i] = 0;
        processes[i].remainingBurstTime = processes[i].burstTime;
    }
    while (completed < n) {
        minPriority = -1;
        int minIndex = -1;
        for (int i = 0; i < n; i++) {
            if (!isCompleted[i] && (minPriority == -1 || processes[i].priority < minPriority)) {
                minPriority = processes[i].priority;
                minIndex = i;
            }
        }
        processes[minIndex].remainingBurstTime--;
        if (processes[minIndex].remainingBurstTime == 0) {
            isCompleted[minIndex] = 1;
            completed++;
            processes[minIndex].turnaroundTime = currentTime + 1;
            processes[minIndex].waitingTime = processes[minIndex].turnaroundTime - processes[minIndex].burstTime;
        }
        currentTime++;
    }
}
void displayResults(Process processes[], int n) {
    int totalWaitingTime = 0, totalTurnaroundTime = 0;
    printf("\nProcessID\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].processID,
               processes[i].burstTime, processes[i].priority,
               processes[i].waitingTime, processes[i].turnaroundTime);
        totalWaitingTime += processes[i].waitingTime;
        totalTurnaroundTime += processes[i].turnaroundTime;
    }
    printf("\nAverage Waiting Time: %.2f\n", (float)totalWaitingTime / n);
    printf("Average Turnaround Time: %.2f\n", (float)totalTurnaroundTime / n);
}
int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    Process processes[n];
    for (int i = 0; i < n; i++) {
        printf("\nEnter details for Process %d\n", i + 1);
        processes[i].processID = i + 1;
        printf("Burst Time: ");
        scanf("%d", &processes[i].burstTime);
        printf("Priority (lower number means higher priority): ");
        scanf("%d", &processes[i].priority);
    }
    calculateWaitingTime(processes, n);
    displayResults(processes, n);
    return 0;
}
