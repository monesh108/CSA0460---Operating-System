#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#define SIZE 5  
int buffer[SIZE], in = 0, out = 0;
sem_t empty, full; 
pthread_mutex_t lock;  
void* producer(void* arg) {
    for (int i = 1; i <= 10; i++) {
        sem_wait(&empty);  
        pthread_mutex_lock(&lock); 
        buffer[in] = i;  
        printf("Produced: %d\n", i);
        in = (in + 1) % SIZE;  
        pthread_mutex_unlock(&lock);  
        sem_post(&full);  
    }
    return NULL;
}
void* consumer(void* arg) {
    for (int i = 1; i <= 10; i++) {
        sem_wait(&full);  
        pthread_mutex_lock(&lock);  
        int item = buffer[out];  
        printf("Consumed: %d\n", item);
        out = (out + 1) % SIZE;  
        pthread_mutex_unlock(&lock); 
        sem_post(&empty);  
    }
    return NULL;
}
int main() {
    pthread_t prod, cons;
    sem_init(&empty, 0, SIZE);  
    sem_init(&full, 0, 0); 
    pthread_mutex_init(&lock, NULL);
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&lock);
    return 0;
}
